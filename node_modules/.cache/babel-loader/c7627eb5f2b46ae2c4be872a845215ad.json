{"ast":null,"code":"var _jsxFileName = \"/Users/akshaykulkarni/Documents/stutor/stutor/src/components/AllDiscs/AllDiscs.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./AllDiscs.css\";\nimport axios from \"axios\";\n\nfunction AllDiscs(props) {\n  let userId = props.match.params.id.slice(3);\n  let places = [];\n  let discussions = [];\n  const [allData, setAllData] = useState({});\n\n  function handleJoinGroup(discId) {\n    axios.put(\"http://localhost:5000/discussions/addAttendee/\" + discId + \"/\" + userId);\n  }\n\n  function retreiveAllPending() {\n    return new Promise((resolve, reject) => {\n      axios.get(\"http://localhost:5000/users/getId/\" + userId).then(resp => {\n        axios.get(\"http://localhost:5000/places/getPlaces/\" + resp.data[0].college).then(res => {\n          res.data.forEach(place => {\n            places.push(place.place);\n            discussions.push([]);\n            axios.get(\"http://localhost:5000/discussions/getPending/\" + place._id).then(pendingDiscs => {\n              pendingDiscs.data.forEach((disc, index) => {\n                axios.get(\"http://localhost:5000/topics/\" + disc.topic).then(top => {\n                  if (top.data.length === 0) {\n                    discussions[discussions.length - 1].push({});\n                  } else {\n                    let obj = {\n                      start: disc.start_time,\n                      duration: disc.duration,\n                      max_attendees: disc.max_attendees,\n                      topic_name: top.data[0].topic_name,\n                      author: top.data[0].author,\n                      discussion: top.data[0].discussion_material,\n                      subject: top.data[0].subject,\n                      _id: disc._id,\n                      present_attendees: disc.present_attendees\n                    };\n                    discussions[discussions.length - 1].push(obj);\n                  }\n\n                  if (discussions.length === res.data.length && index === pendingDiscs.data.length - 1) {\n                    setAllData({\n                      places: places,\n                      discussion: discussions\n                    });\n                    resolve(\"done\");\n                  }\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n  let cards = [];\n  useEffect(() => {\n    retreiveAllPending();\n  }, []);\n\n  if (allData.places !== undefined) {\n    let pl = allData.places;\n    let disc = allData.discussion;\n\n    for (let i = 0; i < pl.length; i++) {\n      if (disc[i].length === 0) continue;else {\n        async function updateCards() {\n          await disc[i].forEach((d, index) => {\n            if (d.topic_name !== undefined) {\n              if (d.present_attendees !== undefined && d.present_attendees.includes(userId)) {\n                cards.push(React.createElement(\"div\", {\n                  key: index,\n                  className: \"card join-group\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 65\n                  },\n                  __self: this\n                }, React.createElement(\"div\", {\n                  className: \"card-body\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 66\n                  },\n                  __self: this\n                }, React.createElement(\"div\", {\n                  className: \"card-title\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 67\n                  },\n                  __self: this\n                }, \"Topic: \", d.topic_name), React.createElement(\"div\", {\n                  className: \"card-text\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 68\n                  },\n                  __self: this\n                }, \"Discussion: \", d.discussion), React.createElement(\"div\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 69\n                  },\n                  __self: this\n                }, \"Duration: \", d.duration), React.createElement(\"div\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 70\n                  },\n                  __self: this\n                }, \"Start Time: \", d.start), React.createElement(\"div\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 71\n                  },\n                  __self: this\n                }, \"Max Attendees: \", d.max_attendees), React.createElement(\"div\", {\n                  style: {\n                    color: \"red\"\n                  },\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 72\n                  },\n                  __self: this\n                }, \"Attending\"))));\n              } else {\n                cards.push(React.createElement(\"div\", {\n                  key: index,\n                  className: \"card join-group\",\n                  onClick: () => handleJoinGroup(d._id),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 77\n                  },\n                  __self: this\n                }, React.createElement(\"div\", {\n                  className: \"card-body\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 78\n                  },\n                  __self: this\n                }, React.createElement(\"div\", {\n                  className: \"card-title\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 79\n                  },\n                  __self: this\n                }, \"Topic: \", d.topic_name), React.createElement(\"div\", {\n                  className: \"card-text\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 80\n                  },\n                  __self: this\n                }, \"Discussion: \", d.discussion), React.createElement(\"div\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 81\n                  },\n                  __self: this\n                }, \"Duration: \", d.duration), React.createElement(\"div\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 82\n                  },\n                  __self: this\n                }, \"Start Time: \", d.start), React.createElement(\"div\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 83\n                  },\n                  __self: this\n                }, \"Max Attendees: \", d.max_attendees))));\n              }\n            }\n          });\n        }\n\n        updateCards();\n      }\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, cards);\n}\n\nexport default AllDiscs;","map":{"version":3,"sources":["/Users/akshaykulkarni/Documents/stutor/stutor/src/components/AllDiscs/AllDiscs.js"],"names":["React","useState","useEffect","axios","AllDiscs","props","userId","match","params","id","slice","places","discussions","allData","setAllData","handleJoinGroup","discId","put","retreiveAllPending","Promise","resolve","reject","get","then","resp","data","college","res","forEach","place","push","_id","pendingDiscs","disc","index","topic","top","length","obj","start","start_time","duration","max_attendees","topic_name","author","discussion","discussion_material","subject","present_attendees","cards","undefined","pl","i","updateCards","d","includes","color"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport \"./AllDiscs.css\";\nimport axios from \"axios\";\n\nfunction AllDiscs(props){\n\n    let userId=props.match.params.id.slice(3,);\n    let places=[]\n    let discussions = []\n    const [allData, setAllData] = useState({})\n\n\n    function handleJoinGroup(discId){\n        axios.put(\"http://localhost:5000/discussions/addAttendee/\" + discId + \"/\" + userId);\n    }\n    function retreiveAllPending(){\n        return new Promise((resolve, reject)=>{\n            axios.get(\"http://localhost:5000/users/getId/\"+userId)\n            .then(resp=>{\n                axios.get(\"http://localhost:5000/places/getPlaces/\" + resp.data[0].college)\n                .then(res=>{\n                    res.data.forEach(place=>{\n                        places.push(place.place);\n                        discussions.push([]);\n                        axios.get(\"http://localhost:5000/discussions/getPending/\" + place._id)\n                        .then(pendingDiscs=>{\n                            pendingDiscs.data.forEach((disc, index)=>{\n                                axios.get(\"http://localhost:5000/topics/\"+disc.topic)\n                                .then(top=>{\n                                    if(top.data.length===0){\n                                        discussions[discussions.length-1].push({});\n                                    }\n                                    else{\n                                        let obj = {start: disc.start_time, duration:disc.duration, max_attendees:disc.max_attendees,topic_name :top.data[0].topic_name,\n                                            author : top.data[0].author,discussion : top.data[0].discussion_material,subject : top.data[0].subject, _id: disc._id, present_attendees:disc.present_attendees}\n                                        discussions[discussions.length-1].push(obj);\n                                    }\n                                    if(discussions.length===res.data.length && index===pendingDiscs.data.length - 1){\n                                        setAllData({places:places, discussion:discussions});\n                                        resolve(\"done\");\n                                    }\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    }\n    let cards = [];\n    useEffect(()=>{\n        retreiveAllPending();\n    },[]);\n\n    if(allData.places !==undefined){\n        let pl = allData.places;\n        let disc = allData.discussion;\n            for(let i=0;i<pl.length;i++){\n                if(disc[i].length===0) continue;\n                else{\n                    async function updateCards(){\n                        await disc[i].forEach((d, index)=>{\n                            if (d.topic_name !==undefined){\n                                if(d.present_attendees !==undefined && d.present_attendees.includes(userId)){\n                                    cards.push(<div key={index} className=\"card join-group\">\n                                                <div className=\"card-body\">\n                                                    <div className=\"card-title\">Topic: {d.topic_name}</div>\n                                                    <div className=\"card-text\">Discussion: {d.discussion}</div>\n                                                    <div>Duration: {d.duration}</div>\n                                                    <div>Start Time: {d.start}</div>\n                                                    <div>Max Attendees: {d.max_attendees}</div>\n                                                    <div style={{color:\"red\"}}>Attending</div>\n                                                </div>\n                                            </div>)\n                                }\n                                else{\n                                    cards.push(<div key={index} className=\"card join-group\" onClick={()=> handleJoinGroup(d._id)}>\n                                                <div className=\"card-body\">\n                                                    <div className=\"card-title\">Topic: {d.topic_name}</div>\n                                                    <div className=\"card-text\">Discussion: {d.discussion}</div>\n                                                    <div>Duration: {d.duration}</div>\n                                                    <div>Start Time: {d.start}</div>\n                                                    <div>Max Attendees: {d.max_attendees}</div>\n                                                </div>\n                                            </div>)\n                                }\n                            }\n                        })\n                    }\n                    updateCards();\n                }\n            }\n    }\n\n    return <div className=\"container\">\n            {cards}\n    </div>\n}\n\nexport default AllDiscs;"]},"metadata":{},"sourceType":"module"}